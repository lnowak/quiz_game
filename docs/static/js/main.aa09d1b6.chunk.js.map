{"version":3,"sources":["Components/WelcomeScreen.js","Components/ChoiceScreen.js","Components/QuestionArea.js","Components/ScoreScreen.js","Components/MainScreen.js","App.js","reportWebVitals.js","index.js"],"names":["WelcomeScreen","isScreenActive","setIsScreenActive","className","viewBox","id","d","href","onClick","ChoiceScreen","category_buttons","select_options","categories","setChosenCategory","chosenCategory","chooseCategory","e","target","type","value","dataset","trivia_categories","map","item","Number","data-id","name","selected","onChange","color","disabled","QuestionArea","que","index","pageNo","setPageNo","score","setScore","useState","isCorrect","setIsCorrect","encode","mystring","replace","question","answers","correct_answer","incorrect_answers","push","sort","choseAnswer","console","log","innerText","setTimeout","answer","ScoreScreen","MainScreen","quest","questions","results","App","setCategories","setQuestions","useEffect","fetch","then","resp","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa09d1b6.chunk.js","sourcesContent":["const WelcomeScreen = ({ isScreenActive, setIsScreenActive}) => {\r\n\r\n\r\n    return (\r\n        <div className={`${isScreenActive === 1 ? 'welcomeScreen' : 'hidden'}`} >\r\n            <div className='screen__name welcomeScreen__name'>\r\n                <svg viewBox=\"0 0 500 500\" className='name'>\r\n                    <path id=\"curve\" d=\"M72.2,148.6c4-6.1,65.5-6.8,178.6-95.6c111.3,1.2,170.8,90.3,175.1,97\" />\r\n                    <text>\r\n                        <textPath href=\"#curve\">\r\n                            Quiz Game\r\n                        </textPath>\r\n                    </text>\r\n                </svg>\r\n            </div>\r\n            <div className='welcome__logo logo'></div>\r\n            <button className='welcomeScreen__button button' onClick={() => {setIsScreenActive(2)}}>Let's play</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WelcomeScreen","import { CircleToBlockLoading } from 'react-loadingg';\r\n\r\nconst ChoiceScreen = ({categories, setChosenCategory, chosenCategory, isScreenActive, setIsScreenActive}) => {\r\n\r\n    const chooseCategory = e => {\r\n        if(e.target.type === 'select-one') {\r\n            setChosenCategory(e.target.value);\r\n        } else {\r\n            setChosenCategory(e.target.dataset.id);\r\n        }\r\n        if(e.target.value === 'none') {\r\n            setChosenCategory(false);\r\n        }\r\n    }\r\n\r\n    let category_buttons;\r\n    if (categories){\r\n        category_buttons = categories.trivia_categories.map(item => <button className={`choiceScreen__chooseMenu__button ${Number(item.id) === Number(chosenCategory) ? 'choiceScreen__chooseMenu__button--checked' : ''}`} key={item.id} data-id={item.id} onClick={chooseCategory}>{item.name}</button>)\r\n    }\r\n    let select_options;\r\n    if (categories){\r\n        select_options = categories.trivia_categories.map(item => <option className={`choiceScreen__chooseMenu__select ${Number(item.id) === Number(chosenCategory) ? 'choiceScreen__chooseMenu__button--checked' : ''}`} selected={Number(chosenCategory) === Number(item.id) ? true : false} key={item.id} data-id={item.id} value={item.id} >{item.name}</option>)\r\n    }\r\n\r\n    return (\r\n        <div className={isScreenActive === 2 ? 'choiceScreen' : 'hidden'}>\r\n            {/* <div className='screen__name'>\r\n                <svg viewBox=\"0 0 500 500\">\r\n                    <path id=\"curve\" d=\"M72.2,148.6c4-6.1,65.5-6.8,178.6-95.6c111.3,1.2,170.8,90.3,175.1,97\" />\r\n                    <text className='lkl' width=\"500\">\r\n                        <textPath href=\"#curve\">\r\n                            Quiz Game\r\n                        </textPath>\r\n                    </text>\r\n                </svg>\r\n            </div> */}\r\n            <div className='logo screen__logo'></div>\r\n            <p className={categories ? 'categoryPick' : 'hidden'}>Select a category</p>\r\n            <div className={categories ? 'choiceScreen__chooseMenu' : 'hidden'}>\r\n                {category_buttons}\r\n                <select className='choiceScreen__chooseMenu__selectMenu' onChange={chooseCategory}>\r\n                    <option selected={!chosenCategory ? true : false} value='none'>-</option>\r\n                    {select_options}\r\n                </select>\r\n            </div>\r\n            <div className={categories ? 'hidden' : 'loading'} >\r\n                <CircleToBlockLoading color='white' />\r\n            </div>\r\n            <button className={chosenCategory ? 'choiceScreen__button button' : 'choiceScreen__button--hidden'} disabled={chosenCategory ? false : true} onClick={() => {setIsScreenActive(3)}}>Play</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChoiceScreen","import { useState } from \"react\";\r\n\r\nconst QuestionArea = ({que, index, pageNo, setPageNo, score, setScore}) => {\r\n\r\n    const [isCorrect, setIsCorrect] = useState(true)\r\n\r\n    const encode = mystring => {\r\n        return mystring.replace(/&ouml;/g, 'o').replace(/&lrm;/g, '').replace(/&oacute;/g, 'o').replace(/&auml;/g, 'a').replace(/&quot;/g, '\"').replace(/&ldquo;/g, '\"').replace(/&rdquo;/g, '\"').replace(/&euml;/g, \"e\").replace(/&hellip;/g, '...').replace(/&#039;/g, \"'\").replace(/&rsquo;/g, \"'\").replace(/&lsquo;/g, \"'\").replace(/&amp;/g, \"&\").replace(/&‌pi/g, \"π\").replace(/&shy;/g, \"\");\r\n    }\r\n    let question = encode(que.question);\r\n\r\n    const answers = [que.correct_answer];\r\n    que.incorrect_answers.map(e => {\r\n        answers.push(e);\r\n        answers.sort();\r\n        return answers\r\n    });\r\n\r\n    const choseAnswer = e => {\r\n        setIsCorrect(() => false);\r\n        if (e.target.dataset.id === que.correct_answer) {\r\n            console.log(e.target.innerText, que.correct_answer, 'dobrze');\r\n            setScore(() => score + 1);\r\n            e.target.className = 'correct'\r\n        } else {\r\n            e.target.className = 'incorrect';\r\n        };\r\n        setTimeout(() => {\r\n            setPageNo(() => pageNo + 1);\r\n        }, 500);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={index === pageNo ? 'questionsArea' : 'hidden'}>\r\n            <p className='questionsArea__question'>{question}</p>\r\n            <div className='questionsArea__answers'>\r\n                {answers.map(e => {\r\n                    const answer = encode(e)\r\n                    return <button key={e} data-id={e} disabled={isCorrect ? false : true} className={`${e === que.correct_answer && !isCorrect ? 'correct': 'questionsArea__answers__item '}`} onClick={choseAnswer}>{answer}</button>\r\n                })}\r\n                {/* <button style={{height: '25px', width: '50px'}} onClick={() => setPageNo(() => pageNo + 1)}>+</button>\r\n                <button style={{height: '25px', width: '50px'}} onClick={() => setPageNo(() => pageNo - 1)} >-</button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionArea","const ScoreScreen = ({pageNo, setPageNo, setIsScreenActive, score, setScore, setChosenCategory}) => {\r\n\r\n    const playNewGame = () => {\r\n        setPageNo(() => 0);\r\n        setIsScreenActive(() => 1);\r\n        setScore(() => 0)\r\n        setChosenCategory(() => false)\r\n    }\r\n\r\n    return (\r\n        <div className={pageNo === 10 ? 'questionsArea' : 'hidden'}>\r\n            <div className='scoreScreen__scoreArea'>\r\n                <p>Final score</p> \r\n                <p>{score}/10</p>\r\n            </div>\r\n            <button className='button scoreScreen__button' onClick={playNewGame}>Play New Game</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreScreen","import {useState} from 'react';\r\n\r\nimport QuestionArea from './QuestionArea'\r\nimport ScoreScreen from './ScoreScreen'\r\n\r\nconst MainScreen = ({isScreenActive, setIsScreenActive, questions, score, setScore, setChosenCategory}) => {\r\n\r\n    const [pageNo, setPageNo] = useState(0)\r\n\r\n    let quest;\r\n    if (questions){\r\n        quest = questions.results.map((item, index) => {\r\n            return <QuestionArea key={item.question} que={item} index={index} pageNo={pageNo} setPageNo={setPageNo} setIsScreenActive={setIsScreenActive} score={score} setScore={setScore}/>\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={`${isScreenActive === 3 ? 'mainScreen' : 'hidden'}`}>\r\n            {/* <div className='screen__name'>\r\n                <svg viewBox=\"0 0 500 500\">\r\n                    <path id=\"curve\" d=\"M72.2,148.6c4-6.1,65.5-6.8,178.6-95.6c111.3,1.2,170.8,90.3,175.1,97\" />\r\n                    <text className='lkl' width=\"500\">\r\n                        <textPath href=\"#curve\">\r\n                            Quiz Game\r\n                        </textPath>\r\n                    </text>\r\n                </svg>\r\n            </div> */}\r\n            <div className='logo screen__logo'></div>\r\n            {quest}\r\n            <ScoreScreen setChosenCategory={setChosenCategory} pageNo={pageNo} setPageNo={setPageNo} score={score} setScore={setScore} setIsScreenActive={setIsScreenActive}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainScreen","import {useState, useEffect} from 'react';\n\nimport './App.css';\n\nimport WelcomeScreen from './Components/WelcomeScreen';\nimport ChoiceScreen from './Components/ChoiceScreen'\nimport MainScreen from './Components/MainScreen'\n\nfunction App() {\n\n  const [categories, setCategories] = useState(false);\n  const [chosenCategory, setChosenCategory] = useState(false);\n  const [questions, setQuestions] = useState(false)\n  const [isScreenActive, setIsScreenActive] = useState(1);\n  const [score, setScore] = useState(0)\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\")\n    .then(resp => {\n      return resp.json();\n    })\n    .then(data => {\n      setCategories(data)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }, [])\n\n  useEffect(() => {\n    fetch(`https://opentdb.com/api.php?amount=10&category=${chosenCategory}&type=multiple`)\n    .then(resp => {\n      return resp.json();\n    })\n    .then(data => {\n      setQuestions(data)\n    })\n  }, [chosenCategory]);\n\n  return (\n    <div className=\"App\">\n      <WelcomeScreen isScreenActive={isScreenActive} setIsScreenActive={setIsScreenActive}/>\n      <ChoiceScreen isScreenActive={isScreenActive} setIsScreenActive={setIsScreenActive} categories={categories} setChosenCategory={setChosenCategory} chosenCategory={chosenCategory} />\n      <MainScreen isScreenActive={isScreenActive} setIsScreenActive={setIsScreenActive} questions={questions} score={score} setScore={setScore} setChosenCategory={setChosenCategory}/>\n      <div className='rotated'>Rotate your device</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}